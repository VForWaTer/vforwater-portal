"""
Django settings for heron project.

Generated by 'django-admin startproject' using Django 1.10.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from django.utils.translation import ugettext

##PATH_INFO = '/'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# For now, place all data files in VFW_DIR and not into source directory.
HOME_DIR = os.path.expanduser('~')
VFW_DIR = os.path.join(HOME_DIR, 'vforwater-example')
if not os.path.exists(VFW_DIR):
    os.makedirs(VFW_DIR)

# Set where the server is running on
HOST_NAME = "myportal.mydomain.de"
VFW_SERVER = 'https://' + HOST_NAME
MAP_SERVER = "https://b.tile.openstreetmap.org" # for production system setup your own map server!
LOCAL_GEOSERVER = 'http://127.0.0.1:8080/geoserver'

# Variable to set the demo path in static files
DEMO_VAR = ''

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Generate secret on initial run. ("random" should be replaced with "secrets" for python >=3.6)
import random, string

secretFile = os.path.join(VFW_DIR, 'secret.txt')
if not os.path.isfile(secretFile):
    SECRET_KEY = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(64))
    with open(secretFile, 'w+') as f:
        f.write(SECRET_KEY)
else:
    with open(secretFile) as f:
        SECRET_KEY = f.read().strip()

SECRET_GEOSERVER = "'admin', 'geoserver'"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s %(module)s %(message)s'
        }
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(VFW_DIR, 'debug.log'),
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'heron': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'vfwheron': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'watts_rsp': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        }
    }

}

# Application definition

INSTALLED_APPS = [
    'vfwheron.apps.VfwheronConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    # 'heron_wps',
    'wps_gui',
    'heron_monitor',
    'heron_visual',
    'upload',
    'author_manage.apps.authorManageConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
# For automatic translations see:
# https://docs.djangoproject.com/en/1.11/topics/i18n/translation/#how-django-discovers-language-preference
# Also see: https://djangobook.com/internationalization-template-code/ or https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django/Home_page
    # 'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'heron.middleware.LanguageCookieMiddleware.LanguageCookieMiddleware',
]

ROOT_URLCONF = 'heron.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'heron.context_processors.global_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'heron.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
# http://diegobz.net/2011/02/10/django-database-router-using-settings/

# DATABASE_ROUTERS = ['heron.router.DatabaseRouter']
# DATABASE_APPS_MAPPING = {'vfwheron': 'vforwater'}

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'vfw_start',
        'HOST': 'localhost',
        'PORT': '5432',
        'USER': 'testuser',
        'PASSWORD': 'test',
    }

}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# When defining a model, if no field in a model is defined with primary_key=True an implicit primary key is added.
DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

# LANGUAGES = [
#   ('de', _('German')),
#   ('en', _('English')),
# ]

TIME_ZONE = 'Europe/Berlin'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default URLs for user authentication
LOGIN_URL = 'vfwheron:login'
LOGIN_REDIRECT_URL = 'vfwheron:home'
LOGOUT_REDIRECT_URL = 'vfwheron:home'
LOGIN_SUCCESS_VIEW = VFW_SERVER + '/vfwheron/rsp/login/success'
LOGIN_FAILURE_VIEW = VFW_SERVER + '/vfwheron'


# Figure out if we're on our development server...
import socket

ON_VFW_SERVER = socket.gethostname() == HOST_NAME

# ...if we are, enable Watts.
if ON_VFW_SERVER:
    INSTALLED_APPS.append('watts_rsp')

    # Authentication configuration
    AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
    )


# Settings from workflowPSE, here for wps_workflow app
import logging.handlers
formatter = logging.Formatter(
    '%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d;%(funcName)s()] - %(message)s')  #
filehandler = logging.handlers.RotatingFileHandler(
    BASE_DIR + '/wps.log', mode='a', maxBytes=128 * 1024, backupCount=1, encoding=None, delay=0)
filehandler.setFormatter(formatter)
wps_log = logging.getLogger('wps')

wps_log.setLevel(logging.DEBUG)  # set logging level here
wps_log.addHandler(filehandler)
# For django_crontab
# END OF settings from workflow app

max_size_preview_plot = 50000
